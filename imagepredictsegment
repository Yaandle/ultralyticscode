from ultralytics import YOLO
import os
import cv2
import numpy as np

def find_closest_stem(fruit_centroid, stem_centroids):
    distances = [np.sqrt((fruit_centroid[0] - stem[0])**2 + (fruit_centroid[1] - stem[1])**2) for stem in stem_centroids]
    return stem_centroids[np.argmin(distances)]

model = YOLO("")
source = "Input"
output_dir = "Output"
os.makedirs(output_dir, exist_ok=True)

image_files = [f for f in os.listdir(source) if f.endswith(('.jpg', '.jpeg', '.png'))]
for image_file in image_files:
    image_path = os.path.join(source, image_file)
    results = model(image_path, show_labels=False, conf=0.7, device=0)
    image = cv2.imread(image_path)
    fruit_centroids = []
    stem_centroids = []
    masks_data = []

    for result in results:
        boxes = result.boxes
        if result.masks:
            for mask, box in zip(result.masks, boxes):
                class_id = int(box.cls[0])
                class_name = result.names[class_id]
                mask_array = mask.data[0].cpu().numpy()
                y_coords, x_coords = np.where(mask_array == 1)
                if len(x_coords) > 0 and len(y_coords) > 0:
                    centroid_x = int(np.mean(x_coords))
                    centroid_y = int(np.mean(y_coords))
                    if "stem" in class_name.lower():
                        stem_centroids.append((centroid_x, centroid_y))
                    else:
                        fruit_centroids.append((centroid_x, centroid_y))
                        masks_data.append((mask_array, (centroid_x, centroid_y), class_name, box.xyxy[0].cpu().numpy().astype(int)))
        
    for mask_array, fruit_centroid, class_name, (x1, y1, x2, y2) in masks_data:
        if stem_centroids: 
            closest_stem_centroid = find_closest_stem(fruit_centroid, stem_centroids)
        # Place the grab point slightly above the closest stem centroid
            grab_point_x = closest_stem_centroid[0]
            grab_point_y = closest_stem_centroid[1] - 15  # Offset to move above the calyx
            print(f"Class: {class_name:12}, Bounding Box: [{x1}, {y1}, {x2}, {y2}], Object Mask Centre: [{fruit_centroid[0]}, {fruit_centroid[1]}], Grab Point: [{grab_point_x}, {grab_point_y}]")
            cv2.circle(image, (grab_point_x, grab_point_y), 5, (0, 255, 0), -1)
        else:
            print(f"Class: {class_name:12}, Bounding Box: [{x1}, {y1}, {x2}, {y2}], Object Mask Centre: [{fruit_centroid[0]}, {fruit_centroid[1]}], No stem detected")
    
        contours, _ = cv2.findContours(
            (mask_array * 255).astype(np.uint8),
            cv2.RETR_EXTERNAL,
            cv2.CHAIN_APPROX_SIMPLE
        )
        cv2.drawContours(image, contours, -1, (255, 255, 0), 1)
        cv2.circle(image, (fruit_centroid[0], fruit_centroid[1]), 5, (0, 0, 255), -1)

    output_path = os.path.join(output_dir, image_file)
    cv2.imwrite(output_path, image)
    result.save()
